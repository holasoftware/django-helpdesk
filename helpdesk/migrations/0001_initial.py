# Generated by Django 4.1.7 on 2023-05-13 13:33

import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import helpdesk.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='UUID')),
                ('status', models.SmallIntegerField(choices=[(0, 'Open'), (1, 'In progress'), (2, 'Paused'), (3, 'Resolved'), (4, 'Closed by customer'), (5, 'Closed by support agent'), (6, 'Closed for inactivity'), (7, 'Invalid'), (8, 'Duplicate')], db_column='status', default=0, verbose_name='Status')),
                ('priority', models.SmallIntegerField(choices=[(3, 'Critical'), (2, 'High'), (1, 'Medium'), (0, 'Low')], db_index=True, default=1, verbose_name='Priority')),
                ('date', models.DateTimeField(auto_now_add=True, verbose_name='Date')),
                ('date_closed', models.DateTimeField(blank=True, null=True, verbose_name='Date closed')),
                ('reason_closed', models.TextField(blank=True, null=True, verbose_name='Reason closed')),
                ('subject', models.CharField(max_length=255, verbose_name='Subject')),
                ('body', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Ticket',
                'verbose_name_plural': 'Tickets',
                'ordering': ('priority', 'date'),
                'permissions': (('view_customer', 'Can view ticket customer'), ('view_tickets', 'Can view tickets'), ('view_all_tickets', 'Can view tickets assigned to other users')),
            },
        ),
        migrations.CreateModel(
            name='TicketComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True, verbose_name='Date')),
                ('text', models.TextField(verbose_name='Text')),
                ('read', models.BooleanField(blank=True, null=True, verbose_name='Did the customer read this comment?')),
                ('notified', models.BooleanField(default=True, editable=False)),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='helpdesk.ticket', verbose_name='Ticket')),
            ],
            options={
                'verbose_name': 'Ticket Comment',
                'verbose_name_plural': 'Ticket Comments',
                'ordering': ['date'],
                'get_latest_by': 'date',
            },
        ),
        migrations.CreateModel(
            name='TicketProblemCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('order', models.PositiveIntegerField(default=100, verbose_name='order')),
            ],
            options={
                'verbose_name': 'Ticket Problem Category',
                'verbose_name_plural': 'Ticket Problem Categories',
                'ordering': ('order', 'name'),
            },
        ),
        migrations.CreateModel(
            name='TicketMeta',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('value', models.JSONField()),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='metadata', to='helpdesk.ticket', verbose_name='Ticket')),
            ],
            options={
                'verbose_name': 'Ticket Metadata',
                'verbose_name_plural': 'Ticket Metadata',
            },
        ),
        migrations.CreateModel(
            name='TicketInternalNote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(help_text='Text of the note.', verbose_name='Text')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='helpdesk.ticket', verbose_name='Ticket')),
            ],
            options={
                'verbose_name': 'Ticket Internal Note',
                'verbose_name_plural': 'Ticket Internal Notes',
                'ordering': ['ticket', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TicketCustomerSupportAgentReadTracker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subscription_date', models.DateTimeField(auto_now_add=True, verbose_name='Subscription Date')),
                ('last_read_on', models.DateTimeField(auto_now=True)),
                ('last_comment_id_read', models.BigIntegerField(editable=False)),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='helpdesk.ticket', verbose_name='Ticket')),
            ],
            options={
                'verbose_name': 'Ticket Support Team Read Tracker',
                'verbose_name_plural': 'Ticket Support Team Read Tracker',
            },
        ),
        migrations.CreateModel(
            name='TicketCommentAttachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(max_length=1000, upload_to=helpdesk.models.ticket_attachment_path, verbose_name='File')),
                ('file_name', models.TextField()),
                ('mimetype', models.CharField(blank=True, max_length=255, verbose_name='MIME Type')),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='helpdesk.ticketcomment', verbose_name='Ticket comment')),
            ],
            options={
                'verbose_name': 'Ticket Comment Attachment',
                'verbose_name_plural': 'Ticket Comment Attachments',
            },
        ),
        migrations.CreateModel(
            name='TicketChangeLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True, verbose_name='Date')),
                ('field', models.CharField(choices=[('status', 'Status'), ('priority', 'Priority'), ('problem_category', 'Problem category')], db_index=True, max_length=100, verbose_name='Field')),
                ('old_value', models.TextField(blank=True, null=True, verbose_name='Old Value')),
                ('new_value', models.TextField(blank=True, null=True, verbose_name='New Value')),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='status_changelogs', to='helpdesk.ticket', verbose_name='Ticket')),
            ],
            options={
                'verbose_name': 'Ticket change',
                'verbose_name_plural': 'Ticket changes',
                'ordering': ('ticket', 'date'),
                'get_latest_by': 'date',
            },
        ),
        migrations.CreateModel(
            name='TicketAttachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(max_length=1000, upload_to=helpdesk.models.ticket_attachment_path, verbose_name='File')),
                ('mime_type', models.CharField(blank=True, max_length=255, verbose_name='MIME Type')),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='helpdesk.ticket', verbose_name='Ticket')),
            ],
            options={
                'verbose_name': 'Ticket Attachment',
                'verbose_name_plural': 'Ticket Attachments',
            },
        ),
        migrations.AddField(
            model_name='ticket',
            name='problem_category',
            field=models.ForeignKey(blank=True, db_column='problem_category', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tickets', to='helpdesk.ticketproblemcategory'),
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('message', models.TextField()),
                ('is_read', models.BooleanField(default=False, editable=False)),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='helpdesk.ticket')),
            ],
            options={
                'verbose_name': 'Notification',
                'verbose_name_plural': 'Notifications',
            },
        ),
        migrations.CreateModel(
            name='HistoryAction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('change_type', models.CharField(choices=[('change status', 'Change status'), ('change priority', 'Change priority'), ('change assignee', 'Change assignee'), ('created comment', 'Created comment'), ('edited comment', 'Edited comment'), ('deleted comment', 'Deleted comment'), ('created internal note', 'Created internal note'), ('edited internal note', 'Edited internal note'), ('deleted internal note', 'Deleted internal note')], db_index=True, max_length=64)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('description', models.TextField()),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='helpdesk.ticket')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('displayed_name', models.CharField(blank=True, max_length=150, verbose_name='displayed name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_customer', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', helpdesk.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
            ],
            options={
                'verbose_name': 'customer',
                'verbose_name_plural': 'customers',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('helpdesk.user',),
            managers=[
                ('objects', helpdesk.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='CustomerSupportAgent',
            fields=[
            ],
            options={
                'verbose_name': 'Customer Support Agent',
                'verbose_name_plural': 'Customer Support Agents',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('helpdesk.user',),
            managers=[
                ('objects', helpdesk.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='TicketTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag_name', models.CharField(max_length=50)),
                ('added_datetime', models.DateTimeField(auto_now_add=True)),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tags', to='helpdesk.ticket', verbose_name='Ticket')),
            ],
            options={
                'verbose_name': 'ticket Tag',
                'verbose_name_plural': 'Ticket Tags',
                'ordering': ['added_datetime'],
                'unique_together': {('ticket', 'tag_name')},
            },
        ),
        migrations.AddIndex(
            model_name='ticketmeta',
            index=models.Index(fields=['ticket', 'name'], name='helpdesk_ti_ticket__acf115_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='ticketmeta',
            unique_together={('ticket', 'name')},
        ),
        migrations.AddField(
            model_name='ticketinternalnote',
            name='customer_support_agent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ticket_notes', to='helpdesk.customersupportagent', verbose_name='Customer support agent'),
        ),
        migrations.AddField(
            model_name='ticketcustomersupportagentreadtracker',
            name='customer_support_agent',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='read_comments_tracker', to='helpdesk.customersupportagent', verbose_name='Customer support user'),
        ),
        migrations.AddField(
            model_name='ticketcomment',
            name='customer_support_agent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comments_as_agent', to='helpdesk.customersupportagent', verbose_name='Customer support user'),
        ),
        migrations.AddField(
            model_name='ticketchangelog',
            name='customer_support_agent',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='helpdesk.customersupportagent', verbose_name='User'),
        ),
        migrations.AddField(
            model_name='ticket',
            name='assignee',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='assigned_tickets', to='helpdesk.customersupportagent'),
        ),
        migrations.AddField(
            model_name='ticket',
            name='customer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='customer_tickets', to='helpdesk.customer', verbose_name='Customer'),
        ),
        migrations.AddField(
            model_name='ticket',
            name='opened_by',
            field=models.ForeignKey(blank=True, help_text='Support team member opening the ticket. Null if it was the customer the one opening the ticket', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='opened_tickets_as_agent', to='helpdesk.customersupportagent', verbose_name='Opened by'),
        ),
        migrations.AddField(
            model_name='notification',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='helpdesk.customersupportagent'),
        ),
        migrations.AddField(
            model_name='historyaction',
            name='customer_support_agent',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='helpdesk.customersupportagent'),
        ),
        migrations.AlterUniqueTogether(
            name='ticketcustomersupportagentreadtracker',
            unique_together={('customer_support_agent', 'ticket')},
        ),
    ]
